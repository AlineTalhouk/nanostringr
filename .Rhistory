dim(logXpr)
logXpr <- replicate(10, rnorm(20))
dim(logXpr)
logHK <- apply(A[,7:10],1,mean)
dim(apply(logXpr, 2, function(x) x - logHK))
normtoHK <- apply(logXpr, 2, function(x) x - logHK)
logref <- apply(A[17:20,],2,mean)
logref
normtoRef <- apply(logXpr, 1, function(x) x - logHK)
normtoHK <- apply(logXpr, 2, function(x) x - logHK) %>% apply(., 1, function(x) x - logHK)
normtoHK <- apply(logXpr, 2, function(x) x - logHK) %>% apply(., 1, function(x) x - logHK)
normtoPool <- apply(logXpr, 1, function(x) x - logHK) %>% apply(., 2, function(x) x - logHK)
normtoHK
normtoHK[1:10,1:10]
normtoHK[1:5,1:5]
normtoPool[1:5,1:5]
logXpr <- replicate(5, rnorm(3))
dim(logXpr)
logXpr <- replicate(5, rnorm(6))
dim(logXpr)
logHK <- apply(A[,6],1,mean)
dim(logXpr)
logHK <- apply(logXpr[,5:6],1,mean)
logHK <- apply(logXpr[,4:5],1,mean)
logref <- apply(logXpr[5:6,],2,mean)
normtoHK <- apply(logXpr, 2, function(x) x - logHK) %>% apply(., 1, function(x) x - logHK)
logHK
logXpr[,4:5]
apply(logXpr[,4:5],1,mean)
apply(logXpr[5:6,],2,mean)
apply(logXpr, 2, function(x) x - logHK)
normtoHK <- apply(logXpr, 2, function(x) x - logHK) %>% apply(., 1, function(x) x - logHK)
apply(logXpr, 2, function(x) x - logHK)
normtoHK <- apply(logXpr, 2, function(x) x - logHK) %>% apply(., 1, function(x) x - logref)
normtoPool <- apply(logXpr, 1, function(x) x - logref) %>% apply(., 2, function(x) x - logHK)
normtoHK <- apply(logXpr, 2, function(x) x - logHK) %>% apply(., 1, function(x) x - logref)
normtoPool <- apply(logXpr, 1, function(x) x - logref) %>% apply(., 2, function(x) x - logHK)
logXpr
apply(logXpr, 1, function(x) x - logref)
apply(logXpr, 2, function(x) x - logHK)
normtoPool <- apply(logXpr, 1, function(x) x - logref) %>% apply(., 2, function(x) x - logHK)
logref
logHK
apply(logXpr, 1, function(x) x - logref)
a=apply(logXpr, 1, function(x) x - logref)
apply(a, 2, function(x) x - logHK)
a
logHK
logXpr[,4:5]
apply(logXpr[,4:5],2,mean)
1
logHK <- apply(logXpr[,4:5],1,mean)
logref <- apply(logXpr[5:6,],2,mean)
dim(logXpr)
logref
logHK
a
logref
logXpr
logref
logHK <- logXpr[,5]
logref <- logXpr[6,]
normtoHK <- apply(logXpr, 2, function(x) x - logHK) %>% apply(., 1, function(x) x - logref)
apply(logXpr, 2, function(x) x - logHK)
normtoHK
normtoPool <- apply(logXpr, 1, function(x) x - logref) %>% apply(., 2, function(x) x - logHK)
apply(logXpr, 1, function(x) x - logref)
logref
logXpr
logref
logXpr[1,]-logref
logXpr[2,]-logref
logXpr[5,]-logref
logXpr[6,]-logref
sweep
?sweep
sweep(logXpr,2,logref)
normtoPool <- sweep(logXpr,2,logref) %>% apply(., 2, function(x) x - logHK)
normtoPool
normtoHK
t(normtoHK)==normtoPool
normtoPool <- sweep(logXpr,2,logref) %>% sweep(logXpr,1,logHK)
normtoPool <- sweep(logXpr,2,logref) %>% sweep(logXpr,1,logHK)
logHK <- apply(logXpr[,4:5],1,mean)
logHK <- logXpr[,5]
logref <- apply(logXpr[5:6,],2,mean)
logref <- logXpr[6,]
normtoHK <- apply(logXpr, 2, function(x) x - logHK) %>% apply(., 1, function(x) x - logref)
normtoPool <- sweep(logXpr,2,logref) %>% sweep(logXpr,1,logHK)
normtoPool <- sweep(logXpr,2,logref) %>% sweep(.,1,logHK)
normtoPool
normtoHK
normtoHK <- sweep(logXpr, 2, logHK) %>% sweep(., 1,logref)
normtoHK <- sweep(logXpr,1, logHK) %>% sweep(.,2,logref)
normtoPool <- sweep(logXpr,2,logref) %>% sweep(.,1,logHK)
t(normtoHK)==normtoPool
normtoHK
normtoPool
logXpr <- replicate(5, rnorm(6))
dim(logXpr)
logHK <- apply(logXpr[,4:5],1,mean)
logref <- apply(logXpr[5:6,],2,mean)
normtoHK <- sweep(logXpr,1, logHK) %>% sweep(.,2,logref)
normtoPool <- sweep(logXpr,2,logref) %>% sweep(.,1,logHK)
normtoHK
normtoPool
library(CHL26predictor)
library(dplyr)
library(batchAdj)
getNum <- function(str.vect){
sapply(strsplit(str.vect,"[_]"),"[[",2)
}
hld.n <- HKnorm(hld.r)
expHLD <- subset(expQC,HLD=="Yes")
hld1 <- hld.n[,grep("HL1",colnames(hld.n))]
exp.hld1 <- subset(expHLD,geneRLF=="HL1")
hld2 <- hld.n[,grep("HL2",colnames(hld.n))]
exp.hld2 <- subset(expHLD,geneRLF=="HL2")
CHL26.HL1.exprs=hld.n[rownames(hld.n)%in%CHL26.model.coef.df$geneName,grep("HL1",colnames(hld.n))]+log(1000,2)
CHL26.HL2.exprs=hld.n[rownames(hld.n)%in%CHL26.model.coef.df$geneName,grep("HL2",colnames(hld.n))]+log(1000,2)
risk.thres <- 0.6235
scores.df1 <- get_CHL26_scores(as.matrix(CHL26.HL1.exprs))
scores.df2 <- get_CHL26_scores(as.matrix(CHL26.HL2.exprs))
scores.risk.df1 <- scores.df1 %>%
mutate(riskClass = ifelse(score >= risk.thres, "High", "Low"))
scores.risk.df2 <- scores.df2 %>%
mutate(riskClass = ifelse(score >= risk.thres, "High", "Low"))
tabRisk=table(scores.risk.df1$riskClass,scores.risk.df2$riskClass)
n=(dim(CHL26.HL1.exprs)[2])
mis=n-sum(diag(tabRisk))
CCplot(scores.risk.df1$score,scores.risk.df2$score,Ptype = "scatter",xrange = range(scores.df1$score), yrange = range(scores.df2$score), xlabel = "HL1", ylabel = "HL2", subtitle = "Scores without Batch Adjustment")
abline(h = risk.thres, col=2, lty = 1)
text (0.7,0.58,paste("Misclassified:",mis))
mis
tabRisk
scores.risk.df1$riskClass
scores.risk.df2$riskClass
which(scores.risk.df1$riskClass!=scores.risk.df2$riskClass)
ind.mis <- which(scores.risk.df1$riskClass!=scores.risk.df2$riskClass)
text (0.7,0.58,paste("Misclassified:",mis),col="red")
point(scores.risk.df1$score[ind.mis],scores.risk.df2$score[ind.mis])
points(scores.risk.df1$score[ind.mis],scores.risk.df2$score[ind.mis])
points(scores.risk.df1$score[ind.mis],scores.risk.df2$score[ind.mis],col="red")
r=3 #Number of reference samples
nB=5000 # of bootstrap samples
nth=1000
misCount=rep(0,nB)
Cmetrix=matrix(0, nrow = nB, ncol = 3)
choice.refs
choice.refs=exp.hld1$summaryID[sample((1:dim(exp.hld1)[1]), r, replace = F)]
choice.refs
choice.refs
choice.refs <- exp.hld1$summaryID[sample((1:dim(exp.hld1)[1]), r, replace = F)]
choice.refs
r
choice.refs <- exp.hld1$sampleID[sample((1:dim(exp.hld1)[1]), r, replace = F)]
choice.refs
DSR2.r <- hld1[,paste("HL2",getNum(choice.refs),sep="_")]
paste("HL2",getNum(choice.refs),sep="_")
DSR2.r <- hld2[,paste("HL2",getNum(choice.refs),sep="_")]
DSR2.s <- hld2[,!colnames(hld2)%in%paste("HL2",getNum(choice.refs),sep="_")]
DSR2.s
DSS2.r <- ratioMethod(DSY,DSR1, DSR2)
DSR1 <- hld1[,choice.refs]
DSR2 <- hld2[,paste("HL2",getNum(choice.refs),sep="_")]
DSY <- hld2[,!colnames(hld2)%in%paste("HL2",getNum(choice.refs),sep="_")]
DSS2.r <- ratioMethod(DSY,DSR1, DSR2)
DSS2.r <- refMethod(DSY,DSR1, DSR2)
DSS2.r <- refMethod(DSY,DSR1, DSR2)
Y=DSY
R1=DSR1
R2=DSR2
m <- apply(R1, 1, mean) - apply(R2, 1, mean)
Ynew <- sweep(Y, 2, m)
m
apply(R1, 1, mean)
apply(R2, 1, mean)
m <- apply(R1, 1, mean) - apply(R2, 1, mean)
Y
Ynew <- sweep(Y, 2, m)
length(m)
dim(Y)
names(Y)
?sweep
A <- array(1:24, dim = 4:2)
A
sweep(A, 1, 5)
(A.min <- apply(A, 1, min))  # == 1:4
sweep(A, 1, A.min)
DSS2.r <- refMethod(Y,DSR1, DSR2)
m <- apply(R1, 1, mean) - apply(R2, 1, mean)
Ynew <- apply(Y, 2, function(x) x + m)
Ynew
library(nanostringr)
library(CHL26predictor)
library(dplyr)
library(batchAdj)
getNum <- function(str.vect){
sapply(strsplit(str.vect,"[_]"),"[[",2)
}
# Normalize to HK
hld.n <- HKnorm(hld.r)
expHLD <- subset(expQC,HLD=="Yes")
hld1 <- hld.n[,grep("HL1",colnames(hld.n))]
exp.hld1 <- subset(expHLD,geneRLF=="HL1")
hld2 <- hld.n[,grep("HL2",colnames(hld.n))]
exp.hld2 <- subset(expHLD,geneRLF=="HL2")
CHL26.HL1.exprs=hld.n[rownames(hld.n)%in%CHL26.model.coef.df$geneName,grep("HL1",colnames(hld.n))]+log(1000,2)
CHL26.HL2.exprs=hld.n[rownames(hld.n)%in%CHL26.model.coef.df$geneName,grep("HL2",colnames(hld.n))]+log(1000,2)
risk.thres <- 0.6235
scores.df1 <- get_CHL26_scores(as.matrix(CHL26.HL1.exprs))
scores.df2 <- get_CHL26_scores(as.matrix(CHL26.HL2.exprs))
scores.risk.df1 <- scores.df1 %>%
mutate(riskClass = ifelse(score >= risk.thres, "High", "Low"))
scores.risk.df2 <- scores.df2 %>%
mutate(riskClass = ifelse(score >= risk.thres, "High", "Low"))
tabRisk=table(scores.risk.df1$riskClass,scores.risk.df2$riskClass)
ind.mis <- which(scores.risk.df1$riskClass!=scores.risk.df2$riskClass)
n=(dim(CHL26.HL1.exprs)[2])
mis=n-sum(diag(tabRisk))
CCplot(scores.risk.df1$score,scores.risk.df2$score,Ptype = "scatter",xrange = range(scores.df1$score), yrange = range(scores.df2$score), xlabel = "HL1", ylabel = "HL2", subtitle = "Scores without Batch Adjustment")
abline(h = risk.thres, col=2, lty = 1)
text (0.7,0.58,paste("Misclassified:",mis),col="red")
points(scores.risk.df1$score[ind.mis],scores.risk.df2$score[ind.mis],col="red")
set.seed(40)
r=3 #Number of reference samples
nB=5000 # of bootstrap samples
nth=1000
misCount=rep(0,nB)
Cmetrix=matrix(0, nrow = nB, ncol = 3)
choice.refs <- exp.hld1$sampleID[sample((1:dim(exp.hld1)[1]), r, replace = F)]
DSR1 <- hld1[,choice.refs]
DSR2 <- hld2[,paste("HL2",getNum(choice.refs),sep="_")]
DSY <- hld2[,!colnames(hld2)%in%paste("HL2",getNum(choice.refs),sep="_")]
Y=DSY
R1=DSR1
R2=DSR2
DSS2.r <- refMethod(Y,DSR1, DSR2)
DSS2.r
DSS2.r <- refMethod(Y+log2(1000),DSR1+log2(1000), DSR2+log2(1000))
DSS2.r
CHL26.HL2.r.SS.exprs=DSS2.r[rownames(DSS2.r)%in%CHL26.model.coef.df$geneName,]
scores.ss.df2.r <- get_CHL26_scores(as.matrix(CHL26.HL2.r.SS.exprs))
scores.risk.ss.df2.r <- scores.ss.df2.r %>%
mutate(riskClass = ifelse(score >= risk.thres, "High", "Low"))
ndx2.r <- substring(scores.df1$sampleID,5) %in% substring(scores.ss.df2.r$sampleID,5)
misCount[i] <- (n-r)-sum(diag(table(scores.risk.df1$riskClass[ndx2.r],scores.risk.ss.df2.r$riskClass)))
Cmetrix[i,]=CCplot(scores.df1$score[ndx2.r],scores.risk.ss.df2.r$score, metrics = TRUE)
i=1
misCount[i] <- (n-r)-sum(diag(table(scores.risk.df1$riskClass[ndx2.r],scores.risk.ss.df2.r$riskClass)))
Cmetrix[i,]=CCplot(scores.df1$score[ndx2.r],scores.risk.ss.df2.r$score, metrics = TRUE)
misCount
Cmetrix
scores.risk.df1$riskClass[ndx2.r]==scores.risk.ss.df2.r$riskClass
which(scores.risk.df1$riskClass[ndx2.r]==scores.risk.ss.df2.r$riskClass)
which(scores.risk.df1$riskClass[ndx2.r]!=scores.risk.ss.df2.r$riskClass)
ind.mis
CCplot(scores.df1$score[ndx2.r],scores.risk.ss.df2.r$score,Ptype = "scatter", xrange = range(scores.df1$score), yrange = range(scores.df2$score), xlabel = "HL1", ylabel = "HL2")
abline(h = risk.thres, col=2, lty = 1)
points(scores.df1$score[!ndx2.r],scores.df2$score[!ndx2.r], col = 2, pch=20)
ind.mis.t <- which(scores.risk.df1$riskClass[ndx2.r]!=scores.risk.ss.df2.r$riskClass)
CCplot(scores.df1$score[ndx2.r],scores.risk.ss.df2.r$score,Ptype = "scatter", xrange = range(scores.df1$score), yrange = range(scores.df2$score), xlabel = "HL1", ylabel = "HL2")
abline(h = risk.thres, col=2, lty = 1)
points(scores.df1$score[ind.mis.t],scores.df2$score[ind.mis.t], col = 2, pch=20)
CCplot(scores.df1$score[ndx2.r],scores.risk.ss.df2.r$score,Ptype = "scatter", xrange = range(scores.df1$score), yrange = range(scores.df2$score), xlabel = "HL1", ylabel = "HL2")
abline(h = risk.thres, col=2, lty = 1)
points(scores.df1$score[ind.mis.t],scores.df2$score[ind.mis.t], col = 2, pch=20)
scores.risk.df1$riskClass
ind.mis.t <- which(scores.risk.df1$riskClass!=scores.risk.ss.df2.r$riskClass)
which(scores.risk.df1$riskClass!=scores.risk.ss.df2.r$riskClass)
scores.risk.df1$riskClass[ndx2.r]
scores.risk.df1$riskClass[ndx2.r]!=scores.risk.ss.df2.r$riskClass
scores.risk.ss.df2.r
ind.mis.t <- scores.risk.ss.df2.r$sampleID[which(scores.risk.df1$riskClass[ndx2.r]!=scores.risk.ss.df2.r$riskClass)]
ind.mis.t
ind.mis.t
ind.mis.t <- scores.risk.ss.df2.r$sampleID[which(scores.risk.df1$riskClass[ndx2.r]!=scores.risk.ss.df2.r$riskClass)]
ind.mis.t
scores.risk.df1$sampleID[ind.mis]
ind.mis.t%in%scores.risk.df1$sampleID[ind.mis]
scores.risk.df1$sampleID[ind.mis] %in%ind.mis.t
ind.mis.t
scores.risk.df1$sampleID[ind.mis]
set.seed(40)
r=3 #Number of reference samples
nB=50 # of bootstrap samples
nth=1000
misCount=rep(0,nB)
Cmetrix=matrix(0, nrow = nB, ncol = 4)
for(i in 1:nB){
choice.refs <- exp.hld1$sampleID[sample((1:dim(exp.hld1)[1]), r, replace = F)]
DSR1 <- hld1[,choice.refs]
DSR2 <- hld2[,paste("HL2",getNum(choice.refs),sep="_")]
DSY <- hld2[,!colnames(hld2)%in%paste("HL2",getNum(choice.refs),sep="_")]
Y=DSY
R1=DSR1
R2=DSR2
DSS2.r <- refMethod(DSY+log2(1000),DSR1+log2(1000), DSR2+log2(1000))
CHL26.HL2.r.SS.exprs=DSS2.r[rownames(DSS2.r)%in%CHL26.model.coef.df$geneName,]
scores.ss.df2.r <- get_CHL26_scores(as.matrix(CHL26.HL2.r.SS.exprs))
scores.risk.ss.df2.r <- scores.ss.df2.r %>%
mutate(riskClass = ifelse(score >= risk.thres, "High", "Low"))
ndx2.r <- substring(scores.df1$sampleID,5) %in% substring(scores.ss.df2.r$sampleID,5)
misCount[i] <- (n-r)-sum(diag(table(scores.risk.df1$riskClass[ndx2.r],scores.risk.ss.df2.r$riskClass)))
(ind.mis.t <- scores.risk.ss.df2.r$sampleID[which(scores.risk.df1$riskClass[ndx2.r]!=scores.risk.ss.df2.r$riskClass)])
Cmetrix[i,]=CCplot(scores.df1$score[ndx2.r],scores.risk.ss.df2.r$score, metrics = TRUE)
if(i %% nth == 0){
CCplot(scores.df1$score[ndx2.r],scores.risk.ss.df2.r$score,Ptype = "scatter", xrange = range(scores.df1$score), yrange = range(scores.df2$score), xlabel = "HL1", ylabel = "HL2")
abline(h = risk.thres, col=2, lty = 1)
text(0.7,0.6,paste("Misclassified",misCount[i]))
}
}
TotalMisCount <- table(misCount)/nB
Accuracy <- Cmetrix[,2]
table(Accuracy)
if (length(TotalMisCount) > 3) {print("more than 3 misclassifications observed")}
set.seed(40)
r=3 #Number of reference samples
nB=50 # of bootstrap samples
nth=1000
misCount=rep(0,nB)
Cmetrix=matrix(0, nrow = nB, ncol = 3)
for(i in 1:nB){
choice.refs <- exp.hld1$sampleID[sample((1:dim(exp.hld1)[1]), r, replace = F)]
DSR1 <- hld1[,choice.refs]
DSR2 <- hld2[,paste("HL2",getNum(choice.refs),sep="_")]
DSY <- hld2[,!colnames(hld2)%in%paste("HL2",getNum(choice.refs),sep="_")]
Y=DSY
R1=DSR1
R2=DSR2
DSS2.r <- refMethod(DSY+log2(1000),DSR1+log2(1000), DSR2+log2(1000))
CHL26.HL2.r.SS.exprs=DSS2.r[rownames(DSS2.r)%in%CHL26.model.coef.df$geneName,]
scores.ss.df2.r <- get_CHL26_scores(as.matrix(CHL26.HL2.r.SS.exprs))
scores.risk.ss.df2.r <- scores.ss.df2.r %>%
mutate(riskClass = ifelse(score >= risk.thres, "High", "Low"))
ndx2.r <- substring(scores.df1$sampleID,5) %in% substring(scores.ss.df2.r$sampleID,5)
misCount[i] <- (n-r)-sum(diag(table(scores.risk.df1$riskClass[ndx2.r],scores.risk.ss.df2.r$riskClass)))
(ind.mis.t <- scores.risk.ss.df2.r$sampleID[which(scores.risk.df1$riskClass[ndx2.r]!=scores.risk.ss.df2.r$riskClass)])
Cmetrix[i,]=CCplot(scores.df1$score[ndx2.r],scores.risk.ss.df2.r$score, metrics = TRUE)
if(i %% nth == 0){
CCplot(scores.df1$score[ndx2.r],scores.risk.ss.df2.r$score,Ptype = "scatter", xrange = range(scores.df1$score), yrange = range(scores.df2$score), xlabel = "HL1", ylabel = "HL2")
abline(h = risk.thres, col=2, lty = 1)
text(0.7,0.6,paste("Misclassified",misCount[i]))
}
}
TotalMisCount <- table(misCount)/nB
Accuracy <- Cmetrix[,2]
table(Accuracy)
if (length(TotalMisCount) > 3) {print("more than 3 misclassifications observed")}
set.seed(40)
r=3 #Number of reference samples
nB=50 # of bootstrap samples
nth=1000
misCount=rep(0,nB)
Cmetrix=matrix(0, nrow = nB, ncol = 3)
for(i in 1:nB){
choice.refs <- exp.hld1$sampleID[sample((1:dim(exp.hld1)[1]), r, replace = F)]
DSR1 <- hld1[,choice.refs]
DSR2 <- hld2[,paste("HL2",getNum(choice.refs),sep="_")]
DSY <- hld2[,!colnames(hld2)%in%paste("HL2",getNum(choice.refs),sep="_")]
Y=DSY
R1=DSR1
R2=DSR2
DSS2.r <- refMethod(DSY+log2(1000),DSR1+log2(1000), DSR2+log2(1000))
CHL26.HL2.r.SS.exprs=DSS2.r[rownames(DSS2.r)%in%CHL26.model.coef.df$geneName,]
scores.ss.df2.r <- get_CHL26_scores(as.matrix(CHL26.HL2.r.SS.exprs))
scores.risk.ss.df2.r <- scores.ss.df2.r %>%
mutate(riskClass = ifelse(score >= risk.thres, "High", "Low"))
ndx2.r <- substring(scores.df1$sampleID,5) %in% substring(scores.ss.df2.r$sampleID,5)
misCount[i] <- (n-r)-sum(diag(table(scores.risk.df1$riskClass[ndx2.r],scores.risk.ss.df2.r$riskClass)))
print(ind.mis.t <- scores.risk.ss.df2.r$sampleID[which(scores.risk.df1$riskClass[ndx2.r]!=scores.risk.ss.df2.r$riskClass)])
Cmetrix[i,]=CCplot(scores.df1$score[ndx2.r],scores.risk.ss.df2.r$score, metrics = TRUE)
if(i %% nth == 0){
CCplot(scores.df1$score[ndx2.r],scores.risk.ss.df2.r$score,Ptype = "scatter", xrange = range(scores.df1$score), yrange = range(scores.df2$score), xlabel = "HL1", ylabel = "HL2")
abline(h = risk.thres, col=2, lty = 1)
text(0.7,0.6,paste("Misclassified",misCount[i]))
}
}
TotalMisCount <- table(misCount)/nB
Accuracy <- Cmetrix[,2]
table(Accuracy)
if (length(TotalMisCount) > 3) {print("more than 3 misclassifications observed")}
library(CHL26predictor)
library(dplyr)
library(batchAdj)
library(nanostringr)
getNum <- function(str.vect){
sapply(strsplit(str.vect,"[_]"),"[[",2)
}
# Normalize to HK
hld.n <- HKnorm(hld.r)
expHLD <- subset(expQC,HLD=="Yes")
hld1 <- hld.n[,grep("HL1",colnames(hld.n))]
exp.hld1 <- subset(expHLD,geneRLF=="HL1")
hld2 <- hld.n[,grep("HL2",colnames(hld.n))]
exp.hld2 <- subset(expHLD,geneRLF=="HL2")
CHL26.HL1.exprs=hld.n[rownames(hld.n)%in%CHL26.model.coef.df$geneName,grep("HL1",colnames(hld.n))]+log(1000,2)
CHL26.HL2.exprs=hld.n[rownames(hld.n)%in%CHL26.model.coef.df$geneName,grep("HL2",colnames(hld.n))]+log(1000,2)
risk.thres <- 0.6235
scores.df1 <- get_CHL26_scores(as.matrix(CHL26.HL1.exprs))
scores.df2 <- get_CHL26_scores(as.matrix(CHL26.HL2.exprs))
scores.risk.df1 <- scores.df1 %>%
mutate(riskClass = ifelse(score >= risk.thres, "High", "Low"))
scores.risk.df2 <- scores.df2 %>%
mutate(riskClass = ifelse(score >= risk.thres, "High", "Low"))
tabRisk=table(scores.risk.df1$riskClass,scores.risk.df2$riskClass)
ind.mis <- which(scores.risk.df1$riskClass!=scores.risk.df2$riskClass)
n=(dim(CHL26.HL1.exprs)[2])
mis=n-sum(diag(tabRisk))
CCplot(scores.risk.df1$score,scores.risk.df2$score,Ptype = "scatter",xrange = range(scores.df1$score), yrange = range(scores.df2$score), xlabel = "HL1", ylabel = "HL2", subtitle = "Scores without Batch Adjustment")
abline(h = risk.thres, col=2, lty = 1)
text (0.7,0.58,paste("Misclassified:",mis),col="red")
points(scores.risk.df1$score[ind.mis],scores.risk.df2$score[ind.mis],col="red")
library(nanostringr)
rm(list=ls(all=TRUE))
library(CHL26predictor)
library(dplyr)
library(batchAdj)
library(nanostringr)
getNum <- function(str.vect){
sapply(strsplit(str.vect,"[_]"),"[[",2)
}
hld.n <- HKnorm(hld.r)
expHLD <- subset(expQC,HLD=="Yes")
hld1 <- hld.n[,grep("HL1",colnames(hld.n))]
exp.hld1 <- subset(expHLD,geneRLF=="HL1")
hld2 <- hld.n[,grep("HL2",colnames(hld.n))]
exp.hld2 <- subset(expHLD,geneRLF=="HL2")
CHL26.HL1.exprs=hld.n[rownames(hld.n)%in%CHL26.model.coef.df$geneName,grep("HL1",colnames(hld.n))]+log(1000,2)
CHL26.HL2.exprs=hld.n[rownames(hld.n)%in%CHL26.model.coef.df$geneName,grep("HL2",colnames(hld.n))]+log(1000,2)
risk.thres <- 0.6235
scores.df1 <- get_CHL26_scores(as.matrix(CHL26.HL1.exprs))
scores.df2 <- get_CHL26_scores(as.matrix(CHL26.HL2.exprs))
scores.risk.df1 <- scores.df1 %>%
mutate(riskClass = ifelse(score >= risk.thres, "High", "Low"))
scores.risk.df2 <- scores.df2 %>%
mutate(riskClass = ifelse(score >= risk.thres, "High", "Low"))
tabRisk=table(scores.risk.df1$riskClass,scores.risk.df2$riskClass)
ind.mis <- which(scores.risk.df1$riskClass!=scores.risk.df2$riskClass)
n=(dim(CHL26.HL1.exprs)[2])
mis=n-sum(diag(tabRisk))
mis
CCplot(scores.risk.df1$score,scores.risk.df2$score,Ptype = "scatter",xrange = range(scores.df1$score), yrange = range(scores.df2$score), xlabel = "HL1", ylabel = "HL2", subtitle = "Scores without Batch Adjustment")
abline(h = risk.thres, col=2, lty = 1)
text (0.7,0.58,paste("Misclassified:",mis),col="red")
points(scores.risk.df1$score[ind.mis],scores.risk.df2$score[ind.mis],col="red")
set.seed(40)
r=3 #Number of reference samples
nB=50 # of bootstrap samples
nth=1000
misCount=rep(0,nB)
Cmetrix=matrix(0, nrow = nB, ncol = 3)
for(i in 1:nB){
choice.refs <- exp.hld1$sampleID[sample((1:dim(exp.hld1)[1]), r, replace = F)]
DSR1 <- t(hld1[,choice.refs]+log2(1000))
DSR2 <- t(hld2[,paste("HL2",getNum(choice.refs),sep="_")]+log2(1000))
DSY <- t(hld2[,!colnames(hld2)%in%paste("HL2",getNum(choice.refs),sep="_")]+log2(1000))
DSS2.r <- t(refMethod(DSY,DSR1, DSR2))
CHL26.HL2.r.SS.exprs=DSS2.r[rownames(DSS2.r)%in%CHL26.model.coef.df$geneName,]
scores.ss.df2.r <- get_CHL26_scores(as.matrix(CHL26.HL2.r.SS.exprs))
scores.risk.ss.df2.r <- scores.ss.df2.r %>%
mutate(riskClass = ifelse(score >= risk.thres, "High", "Low"))
ndx2.r <- substring(scores.df1$sampleID,5) %in% substring(scores.ss.df2.r$sampleID,5)
misCount[i] <- (n-r)-sum(diag(table(scores.risk.df1$riskClass[ndx2.r],scores.risk.ss.df2.r$riskClass)))
print(ind.mis.t <- scores.risk.ss.df2.r$sampleID[which(scores.risk.df1$riskClass[ndx2.r]!=scores.risk.ss.df2.r$riskClass)])
Cmetrix[i,]=CCplot(scores.df1$score[ndx2.r],scores.risk.ss.df2.r$score, metrics = TRUE)
if(i %% nth == 0){
CCplot(scores.df1$score[ndx2.r],scores.risk.ss.df2.r$score,Ptype = "scatter", xrange = range(scores.df1$score), yrange = range(scores.df2$score), xlabel = "HL1", ylabel = "HL2")
abline(h = risk.thres, col=2, lty = 1)
text(0.7,0.6,paste("Misclassified",misCount[i]))
}
}
TotalMisCount <- table(misCount)/nB
Accuracy <- Cmetrix[,2]
table(Accuracy)
if (length(TotalMisCount) > 3) {print("more than 3 misclassifications observed")}
library(nanostringr)
library(CHL26predictor)
library(dplyr)
library(batchAdj)
library(nanostringr)
getNum <- function(str.vect){
sapply(strsplit(str.vect,"[_]"),"[[",2)
}
hld.n <- HKnorm(hld.r)
expHLD <- subset(expQC,HLD=="Yes")
hld1 <- hld.n[,grep("HL1",colnames(hld.n))]
exp.hld1 <- subset(expHLD,geneRLF=="HL1")
hld2 <- hld.n[,grep("HL2",colnames(hld.n))]
exp.hld2 <- subset(expHLD,geneRLF=="HL2")
CHL26.HL1.exprs=hld.n[rownames(hld.n)%in%CHL26.model.coef.df$geneName,grep("HL1",colnames(hld.n))]+log(1000,2)
CHL26.HL2.exprs=hld.n[rownames(hld.n)%in%CHL26.model.coef.df$geneName,grep("HL2",colnames(hld.n))]+log(1000,2)
risk.thres <- 0.6235
scores.df1 <- get_CHL26_scores(as.matrix(CHL26.HL1.exprs))
scores.df2 <- get_CHL26_scores(as.matrix(CHL26.HL2.exprs))
scores.risk.df1 <- scores.df1 %>%
mutate(riskClass = ifelse(score >= risk.thres, "High", "Low"))
scores.risk.df2 <- scores.df2 %>%
mutate(riskClass = ifelse(score >= risk.thres, "High", "Low"))
tabRisk=table(scores.risk.df1$riskClass,scores.risk.df2$riskClass)
ind.mis <- which(scores.risk.df1$riskClass!=scores.risk.df2$riskClass)
n=(dim(CHL26.HL1.exprs)[2])
mis=n-sum(diag(tabRisk))
CCplot(scores.risk.df1$score,scores.risk.df2$score,Ptype = "scatter",xrange = range(scores.df1$score), yrange = range(scores.df2$score), xlabel = "HL1", ylabel = "HL2", subtitle = "Scores without Batch Adjustment")
abline(h = risk.thres, col=2, lty = 1)
text (0.7,0.58,paste("Misclassified:",mis),col="red")
points(scores.risk.df1$score[ind.mis],scores.risk.df2$score[ind.mis],col="red")
```
```{r BootStrapped, message = FALSE, echo = FALSE, warning = FALSE}
set.seed(40)
r=3 #Number of reference samples
library(nanostringr)
